# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@


VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
@CR_BUILD_TESTSUITE_TRUE@testsexec_PROGRAMS = $(am__EXEEXT_6) \
@CR_BUILD_TESTSUITE_TRUE@	$(am__EXEEXT_14)
check_PROGRAMS = $(am__EXEEXT_7) $(am__EXEEXT_13) $(am__EXEEXT_14)
TESTS = $(am__EXEEXT_15) $(SEQ_RUN) $(CRUT_RUN)
subdir = tests
DIST_COMMON = $(check_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/shellinit.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/blcr_config.h
CONFIG_CLEAN_FILES = shellinit
CONFIG_CLEAN_VPATH_FILES =
ARFLAGS = cru
libtest_a_AR = $(AR) $(ARFLAGS)
libtest_a_LIBADD =
am_libtest_a_OBJECTS = crut.$(OBJEXT) crut_util.$(OBJEXT) \
	crut_util_pth.$(OBJEXT) crut_util_libcr.$(OBJEXT)
libtest_a_OBJECTS = $(am_libtest_a_OBJECTS)
am__EXEEXT_1 = atomics$(EXEEXT) bug2524$(EXEEXT)
am__EXEEXT_2 = stage0001$(EXEEXT) stage0002$(EXEEXT) \
	stage0003$(EXEEXT) stage0004$(EXEEXT) \
	critical_sections$(EXEEXT) replace_cb$(EXEEXT) \
	failed_cb$(EXEEXT) failed_cb2$(EXEEXT) pid_in_use$(EXEEXT) \
	cs_enter_leave$(EXEEXT) cs_enter_leave2$(EXEEXT) \
	cr_tryenter_cs$(EXEEXT) stopped$(EXEEXT) edeadlk$(EXEEXT) \
	pid_restore$(EXEEXT)
am__EXEEXT_3 = simple$(EXEEXT) simple_pthread$(EXEEXT) cwd$(EXEEXT) \
	dup$(EXEEXT) filedescriptors$(EXEEXT) pipe$(EXEEXT) \
	named_fifo$(EXEEXT) cloexec$(EXEEXT) get_info$(EXEEXT) \
	orphan$(EXEEXT) overlap$(EXEEXT) child$(EXEEXT) mmaps$(EXEEXT) \
	hugetlbfs$(EXEEXT) readdir$(EXEEXT) dev_null$(EXEEXT) \
	cr_signal$(EXEEXT) linked_fifo$(EXEEXT) sigpending$(EXEEXT) \
	dpipe$(EXEEXT) forward$(EXEEXT) hooks$(EXEEXT) math$(EXEEXT) \
	sigaltstack$(EXEEXT) prctl$(EXEEXT) lam$(EXEEXT) nscd$(EXEEXT)
@CR_ENABLE_SHARED_TRUE@am__EXEEXT_4 = hello$(EXEEXT) \
@CR_ENABLE_SHARED_TRUE@	dlopen_aux$(EXEEXT)
am__EXEEXT_5 = $(am__EXEEXT_4) bug2003_aux$(EXEEXT) pause$(EXEEXT) \
	save_aux$(EXEEXT) reloc_aux$(EXEEXT)
am__EXEEXT_6 = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \
	$(am__EXEEXT_5)
@CR_BUILD_TESTSUITE_FALSE@am__EXEEXT_7 = $(am__EXEEXT_6)
am__EXEEXT_8 = atomics_stress$(EXEEXT)
@CR_HAVE_CXX_TRUE@am__EXEEXT_9 = testcxx$(EXEEXT)
am__EXEEXT_10 = cb_exit$(EXEEXT) ptrace$(EXEEXT) $(am__EXEEXT_9)
am__EXEEXT_11 = hugetlbfs2$(EXEEXT)
am__EXEEXT_12 =
am__EXEEXT_13 = $(am__EXEEXT_8) $(am__EXEEXT_10) $(am__EXEEXT_11) \
	$(am__EXEEXT_12)
am__EXEEXT_14 = seq_wrapper$(EXEEXT) crut_wrapper$(EXEEXT)
am__installdirs = "$(DESTDIR)$(testsexecdir)" \
	"$(DESTDIR)$(testsexecdir)"
PROGRAMS = $(testsexec_PROGRAMS)
atomics_SOURCES = atomics.c
atomics_OBJECTS = atomics-atomics.$(OBJEXT)
atomics_DEPENDENCIES =
atomics_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(atomics_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
atomics_stress_SOURCES = atomics_stress.c
atomics_stress_OBJECTS = atomics_stress-atomics_stress.$(OBJEXT)
atomics_stress_DEPENDENCIES = $(libtest_ldadd)
atomics_stress_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(atomics_stress_CFLAGS) \
	$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
bug2003_aux_SOURCES = bug2003_aux.c
bug2003_aux_OBJECTS = bug2003_aux.$(OBJEXT)
am__DEPENDENCIES_1 =
am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
@CR_ENABLE_SHARED_FALSE@bug2003_aux_DEPENDENCIES =  \
@CR_ENABLE_SHARED_FALSE@	$(am__DEPENDENCIES_2)
bug2003_aux_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(bug2003_aux_LDFLAGS) $(LDFLAGS) -o $@
bug2524_SOURCES = bug2524.c
bug2524_OBJECTS = bug2524.$(OBJEXT)
bug2524_LDADD = $(LDADD)
bug2524_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
cb_exit_SOURCES = cb_exit.c
cb_exit_OBJECTS = cb_exit.$(OBJEXT)
cb_exit_LDADD = $(LDADD)
cb_exit_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
child_SOURCES = child.c
child_OBJECTS = child.$(OBJEXT)
child_LDADD = $(LDADD)
child_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
cloexec_SOURCES = cloexec.c
cloexec_OBJECTS = cloexec.$(OBJEXT)
cloexec_LDADD = $(LDADD)
cloexec_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
cr_signal_SOURCES = cr_signal.c
cr_signal_OBJECTS = cr_signal.$(OBJEXT)
cr_signal_LDADD = $(LDADD)
cr_signal_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
cr_tryenter_cs_SOURCES = cr_tryenter_cs.c
cr_tryenter_cs_OBJECTS = cr_tryenter_cs.$(OBJEXT)
cr_tryenter_cs_LDADD = $(LDADD)
cr_tryenter_cs_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
critical_sections_SOURCES = critical_sections.c
critical_sections_OBJECTS = critical_sections.$(OBJEXT)
critical_sections_LDADD = $(LDADD)
critical_sections_DEPENDENCIES = $(libtest_ldadd) \
	$(am__DEPENDENCIES_2)
crut_wrapper_SOURCES = crut_wrapper.c
crut_wrapper_OBJECTS = crut_wrapper.$(OBJEXT)
crut_wrapper_LDADD = $(LDADD)
crut_wrapper_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
cs_enter_leave_SOURCES = cs_enter_leave.c
cs_enter_leave_OBJECTS = cs_enter_leave.$(OBJEXT)
cs_enter_leave_LDADD = $(LDADD)
cs_enter_leave_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
cs_enter_leave2_SOURCES = cs_enter_leave2.c
cs_enter_leave2_OBJECTS = cs_enter_leave2.$(OBJEXT)
cs_enter_leave2_LDADD = $(LDADD)
cs_enter_leave2_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
cwd_SOURCES = cwd.c
cwd_OBJECTS = cwd.$(OBJEXT)
cwd_LDADD = $(LDADD)
cwd_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
dev_null_SOURCES = dev_null.c
dev_null_OBJECTS = dev_null.$(OBJEXT)
dev_null_LDADD = $(LDADD)
dev_null_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
dlopen_aux_SOURCES = dlopen_aux.c
dlopen_aux_OBJECTS = dlopen_aux.$(OBJEXT)
dlopen_aux_DEPENDENCIES =
dpipe_SOURCES = dpipe.c
dpipe_OBJECTS = dpipe.$(OBJEXT)
dpipe_LDADD = $(LDADD)
dpipe_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
dup_SOURCES = dup.c
dup_OBJECTS = dup.$(OBJEXT)
dup_LDADD = $(LDADD)
dup_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
edeadlk_SOURCES = edeadlk.c
edeadlk_OBJECTS = edeadlk.$(OBJEXT)
edeadlk_LDADD = $(LDADD)
edeadlk_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
failed_cb_SOURCES = failed_cb.c
failed_cb_OBJECTS = failed_cb.$(OBJEXT)
failed_cb_LDADD = $(LDADD)
failed_cb_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
failed_cb2_SOURCES = failed_cb2.c
failed_cb2_OBJECTS = failed_cb2.$(OBJEXT)
failed_cb2_LDADD = $(LDADD)
failed_cb2_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
filedescriptors_SOURCES = filedescriptors.c
filedescriptors_OBJECTS = filedescriptors.$(OBJEXT)
filedescriptors_LDADD = $(LDADD)
filedescriptors_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
forward_SOURCES = forward.c
forward_OBJECTS = forward.$(OBJEXT)
forward_LDADD = $(LDADD)
forward_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
get_info_SOURCES = get_info.c
get_info_OBJECTS = get_info.$(OBJEXT)
get_info_LDADD = $(LDADD)
get_info_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
hello_SOURCES = hello.c
hello_OBJECTS = hello.$(OBJEXT)
hello_DEPENDENCIES =
hooks_SOURCES = hooks.c
hooks_OBJECTS = hooks.$(OBJEXT)
hooks_LDADD = $(LDADD)
hooks_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
hugetlbfs_SOURCES = hugetlbfs.c
hugetlbfs_OBJECTS = hugetlbfs.$(OBJEXT)
hugetlbfs_LDADD = $(LDADD)
hugetlbfs_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
hugetlbfs2_SOURCES = hugetlbfs2.c
hugetlbfs2_OBJECTS = hugetlbfs2.$(OBJEXT)
hugetlbfs2_LDADD = $(LDADD)
hugetlbfs2_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
lam_SOURCES = lam.c
lam_OBJECTS = lam.$(OBJEXT)
lam_LDADD = $(LDADD)
lam_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
linked_fifo_SOURCES = linked_fifo.c
linked_fifo_OBJECTS = linked_fifo.$(OBJEXT)
linked_fifo_LDADD = $(LDADD)
linked_fifo_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
math_SOURCES = math.c
math_OBJECTS = math.$(OBJEXT)
math_LDADD = $(LDADD)
math_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
mmaps_SOURCES = mmaps.c
mmaps_OBJECTS = mmaps.$(OBJEXT)
mmaps_LDADD = $(LDADD)
mmaps_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
named_fifo_SOURCES = named_fifo.c
named_fifo_OBJECTS = named_fifo.$(OBJEXT)
named_fifo_LDADD = $(LDADD)
named_fifo_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
nscd_SOURCES = nscd.c
nscd_OBJECTS = nscd.$(OBJEXT)
nscd_LDADD = $(LDADD)
nscd_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
orphan_SOURCES = orphan.c
orphan_OBJECTS = orphan.$(OBJEXT)
orphan_LDADD = $(LDADD)
orphan_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
overlap_SOURCES = overlap.c
overlap_OBJECTS = overlap.$(OBJEXT)
overlap_LDADD = $(LDADD)
overlap_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
pause_SOURCES = pause.c
pause_OBJECTS = pause.$(OBJEXT)
@CR_ENABLE_SHARED_FALSE@pause_DEPENDENCIES = $(am__DEPENDENCIES_2)
pause_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(pause_LDFLAGS) \
	$(LDFLAGS) -o $@
pid_in_use_SOURCES = pid_in_use.c
pid_in_use_OBJECTS = pid_in_use.$(OBJEXT)
pid_in_use_LDADD = $(LDADD)
pid_in_use_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
pid_restore_SOURCES = pid_restore.c
pid_restore_OBJECTS = pid_restore.$(OBJEXT)
pid_restore_LDADD = $(LDADD)
pid_restore_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
pipe_SOURCES = pipe.c
pipe_OBJECTS = pipe.$(OBJEXT)
pipe_LDADD = $(LDADD)
pipe_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
prctl_SOURCES = prctl.c
prctl_OBJECTS = prctl.$(OBJEXT)
prctl_LDADD = $(LDADD)
prctl_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
ptrace_SOURCES = ptrace.c
ptrace_OBJECTS = ptrace.$(OBJEXT)
ptrace_LDADD = $(LDADD)
ptrace_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
ptrace_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(ptrace_LDFLAGS) \
	$(LDFLAGS) -o $@
readdir_SOURCES = readdir.c
readdir_OBJECTS = readdir.$(OBJEXT)
readdir_LDADD = $(LDADD)
readdir_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
reloc_aux_SOURCES = reloc_aux.c
reloc_aux_OBJECTS = reloc_aux.$(OBJEXT)
@CR_ENABLE_SHARED_FALSE@reloc_aux_DEPENDENCIES =  \
@CR_ENABLE_SHARED_FALSE@	$(am__DEPENDENCIES_2) $(libtest_ldadd)
@CR_ENABLE_SHARED_TRUE@reloc_aux_DEPENDENCIES = $(libtest_ldadd)
reloc_aux_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(reloc_aux_LDFLAGS) $(LDFLAGS) -o $@
replace_cb_SOURCES = replace_cb.c
replace_cb_OBJECTS = replace_cb.$(OBJEXT)
replace_cb_LDADD = $(LDADD)
replace_cb_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
save_aux_SOURCES = save_aux.c
save_aux_OBJECTS = save_aux.$(OBJEXT)
@CR_ENABLE_SHARED_FALSE@save_aux_DEPENDENCIES = $(am__DEPENDENCIES_2) \
@CR_ENABLE_SHARED_FALSE@	$(libtest_ldadd)
@CR_ENABLE_SHARED_TRUE@save_aux_DEPENDENCIES = $(libtest_ldadd)
save_aux_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(save_aux_LDFLAGS) \
	$(LDFLAGS) -o $@
seq_wrapper_SOURCES = seq_wrapper.c
seq_wrapper_OBJECTS = seq_wrapper.$(OBJEXT)
seq_wrapper_DEPENDENCIES = $(libtest_ldadd)
sigaltstack_SOURCES = sigaltstack.c
sigaltstack_OBJECTS = sigaltstack.$(OBJEXT)
sigaltstack_LDADD = $(LDADD)
sigaltstack_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
sigpending_SOURCES = sigpending.c
sigpending_OBJECTS = sigpending.$(OBJEXT)
sigpending_LDADD = $(LDADD)
sigpending_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
simple_SOURCES = simple.c
simple_OBJECTS = simple.$(OBJEXT)
simple_LDADD = $(LDADD)
simple_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
simple_pthread_SOURCES = simple_pthread.c
simple_pthread_OBJECTS = simple_pthread.$(OBJEXT)
simple_pthread_LDADD = $(LDADD)
simple_pthread_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
stage0001_SOURCES = stage0001.c
stage0001_OBJECTS = stage0001.$(OBJEXT)
stage0001_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
stage0002_SOURCES = stage0002.c
stage0002_OBJECTS = stage0002.$(OBJEXT)
stage0002_LDADD = $(LDADD)
stage0002_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
stage0003_SOURCES = stage0003.c
stage0003_OBJECTS = stage0003.$(OBJEXT)
stage0003_LDADD = $(LDADD)
stage0003_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
stage0004_SOURCES = stage0004.c
stage0004_OBJECTS = stage0004.$(OBJEXT)
stage0004_LDADD = $(LDADD)
stage0004_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
stopped_SOURCES = stopped.c
stopped_OBJECTS = stopped.$(OBJEXT)
stopped_LDADD = $(LDADD)
stopped_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
am__testcxx_SOURCES_DIST = testcxx.cc
@CR_HAVE_CXX_TRUE@am_testcxx_OBJECTS = testcxx.$(OBJEXT)
testcxx_OBJECTS = $(am_testcxx_OBJECTS)
testcxx_LDADD = $(LDADD)
testcxx_DEPENDENCIES = $(libtest_ldadd) $(am__DEPENDENCIES_2)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
SCRIPTS = $(testsexec_SCRIPTS)
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/./config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libtest_a_SOURCES) atomics.c atomics_stress.c \
	bug2003_aux.c bug2524.c cb_exit.c child.c cloexec.c \
	cr_signal.c cr_tryenter_cs.c critical_sections.c \
	crut_wrapper.c cs_enter_leave.c cs_enter_leave2.c cwd.c \
	dev_null.c dlopen_aux.c dpipe.c dup.c edeadlk.c failed_cb.c \
	failed_cb2.c filedescriptors.c forward.c get_info.c hello.c \
	hooks.c hugetlbfs.c hugetlbfs2.c lam.c linked_fifo.c math.c \
	mmaps.c named_fifo.c nscd.c orphan.c overlap.c pause.c \
	pid_in_use.c pid_restore.c pipe.c prctl.c ptrace.c readdir.c \
	reloc_aux.c replace_cb.c save_aux.c seq_wrapper.c \
	sigaltstack.c sigpending.c simple.c simple_pthread.c \
	stage0001.c stage0002.c stage0003.c stage0004.c stopped.c \
	$(testcxx_SOURCES)
DIST_SOURCES = $(libtest_a_SOURCES) atomics.c atomics_stress.c \
	bug2003_aux.c bug2524.c cb_exit.c child.c cloexec.c \
	cr_signal.c cr_tryenter_cs.c critical_sections.c \
	crut_wrapper.c cs_enter_leave.c cs_enter_leave2.c cwd.c \
	dev_null.c dlopen_aux.c dpipe.c dup.c edeadlk.c failed_cb.c \
	failed_cb2.c filedescriptors.c forward.c get_info.c hello.c \
	hooks.c hugetlbfs.c hugetlbfs2.c lam.c linked_fifo.c math.c \
	mmaps.c named_fifo.c nscd.c orphan.c overlap.c pause.c \
	pid_in_use.c pid_restore.c pipe.c prctl.c ptrace.c readdir.c \
	reloc_aux.c replace_cb.c save_aux.c seq_wrapper.c \
	sigaltstack.c sigpending.c simple.c simple_pthread.c \
	stage0001.c stage0002.c stage0003.c stage0004.c stopped.c \
	$(am__testcxx_SOURCES_DIST)
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
am__EXEEXT_15 = $(am__EXEEXT_1) $(SIMPLE_scripts)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CONFIGURE_ARGS = @CONFIGURE_ARGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CR_ARCH = @CR_ARCH@
CR_CLIENT_LDADD = @CR_CLIENT_LDADD@
CR_CPU = @CR_CPU@
CR_FTB_INCLUDES = @CR_FTB_INCLUDES@
CR_FTB_LDADD = @CR_FTB_LDADD@
CR_FTB_LDFLAGS = @CR_FTB_LDFLAGS@
CR_KARCH = @CR_KARCH@
CR_KERNEL = @CR_KERNEL@
CR_KERNEL_BASE = @CR_KERNEL_BASE@
CR_LIBARCH = @CR_LIBARCH@
CR_LIBCR_CFLAGS = @CR_LIBCR_CFLAGS@
CR_MODULE_DIR = @CR_MODULE_DIR@
CR_MODULE_MAJOR = @CR_MODULE_MAJOR@
CR_MODULE_MINOR = @CR_MODULE_MINOR@
CR_MODULE_PATCH = @CR_MODULE_PATCH@
CR_MODULE_VERSION = @CR_MODULE_VERSION@
CR_NDEBUG = @CR_NDEBUG@
CR_RELEASE_MAJOR = @CR_RELEASE_MAJOR@
CR_RELEASE_MINOR = @CR_RELEASE_MINOR@
CR_RELEASE_PATCH = @CR_RELEASE_PATCH@
CR_RELEASE_VERSION = @CR_RELEASE_VERSION@
CR_SIGNUM = @CR_SIGNUM@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GMAKE_ELSE = @GMAKE_ELSE@
GMAKE_ENDIF = @GMAKE_ENDIF@
GMAKE_IFEQ = @GMAKE_IFEQ@
GMAKE_IFNEQ = @GMAKE_IFNEQ@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
KBUILD_MAK = @KBUILD_MAK@
KBUILD_MAKE_ARGS = @KBUILD_MAKE_ARGS@
KCC = @KCC@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBCR_MAJOR = @LIBCR_MAJOR@
LIBCR_MINOR = @LIBCR_MINOR@
LIBCR_PATCH = @LIBCR_PATCH@
LIBCR_VERSION = @LIBCR_VERSION@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIBTOOL_AGE = @LIBTOOL_AGE@
LIBTOOL_INTERFACE = @LIBTOOL_INTERFACE@
LIBTOOL_REVISION = @LIBTOOL_REVISION@
LINUX_OBJ = @LINUX_OBJ@
LINUX_SRC = @LINUX_SRC@
LINUX_SYMTAB_CMD = @LINUX_SYMTAB_CMD@
LINUX_SYMTAB_CONF = @LINUX_SYMTAB_CONF@
LINUX_SYMTAB_FILE = @LINUX_SYMTAB_FILE@
LINUX_VER = @LINUX_VER@
LINUX_VERSION_H = @LINUX_VERSION_H@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKE = @MAKE@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PWD_PROG = @PWD_PROG@
RANLIB = @RANLIB@
RPMBUILD = @RPMBUILD@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
TOP_BUILDDIR = @TOP_BUILDDIR@
TOP_SRCDIR = @TOP_SRCDIR@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
lt_ECHO = @lt_ECHO@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@

# Files we clean at various times
CONTEXTS = context.* .context.*.tmp Context[123] .Context[123].tmp
TEST_TEMPS = tst*
@CR_INSTALLED_UTIL_FALSE@util_dir = $(TOP_BUILDDIR)/bin

# Special target (run before tests) ensures utils are up-to-date (if built)
@CR_INSTALLED_UTIL_TRUE@util_dir = $(bindir)

# "SIMPLE" tests, which just return success or failure.
# These tests get listed in the SIMPLE_TESTS variable.
# These test the actual cr_run utility or dlopen(), and thus require shared libs:
@CR_ENABLE_SHARED_TRUE@SIMPLE_scripts_shared = cr_run cr_targ cr_targ2 cr_omit dlopen
SIMPLE_progs = atomics bug2524
SIMPLE_scripts = $(SIMPLE_scripts_shared) \
	bug2003 run_on save_exe save_priv save_share save_all \
	reloc_exe reloc_file reloc_fifo reloc_dir reloc_all \
	clobber

SIMPLE_TESTS = $(SIMPLE_progs) $(SIMPLE_scripts)

# "SEQ" tests are ones that check for certain events happening in
# proper sequence, by using a wrapper to parse output.
# These tests get listed in the SEQ_TESTS variable.
SEQ_progs = stage0001 stage0002 stage0003 stage0004 \
	    critical_sections replace_cb \
	    failed_cb failed_cb2 pid_in_use cs_enter_leave cs_enter_leave2 \
	    cr_tryenter_cs stopped edeadlk pid_restore

# XXX: cb_exit has moved to "bonus" list for now.  See bug 2244.
# XXX: ptrace has moved to "bonus" list for now.  See bug 2455.
SEQ_scripts = 
SEQ_TESTS = $(SEQ_progs) $(SEQ_scripts)

# C/R unit tests ("CRUT")
# These are tests that use the crut.c infractructure and the crut_wrapper
# script.
CRUT_progs = \
	simple simple_pthread cwd dup filedescriptors pipe named_fifo \
	cloexec get_info orphan overlap child mmaps hugetlbfs readdir dev_null \
	cr_signal linked_fifo sigpending dpipe forward hooks math sigaltstack \
	prctl lam nscd

# hugetlbfs2 moved to "bonus" list due to leak of MAP_PRIVATE pages in some kernels
CRUT_TESTS = $(CRUT_progs)

# These are like SIMPLE_TESTS, SEQ_TESTS and CRUT_TESTS, but for
# maintainer-only tests (the "bonus" tests).
@CR_ENABLE_SHARED_TRUE@SEQ_scripts2_shared = \
@CR_ENABLE_SHARED_TRUE@	ash_test bash_test csh_test ksh_test zsh_test \
@CR_ENABLE_SHARED_TRUE@	perl_test python_test tcl_test expect_test ruby_test \
@CR_ENABLE_SHARED_TRUE@	guile_test clisp_test rep_test emacslisp_test \
@CR_ENABLE_SHARED_TRUE@	php_test gst_test gcj_test gij_test jre_test \
@CR_ENABLE_SHARED_TRUE@	ocaml_test sml_test mosml_test

@CR_HAVE_CXX_TRUE@SEQ_testcxx = testcxx
@CR_HAVE_CXX_TRUE@testcxx_SOURCES = testcxx.cc
SIMPLE_progs2 = atomics_stress
SIMPLE_scripts2 = 
SEQ_progs2 = cb_exit ptrace $(SEQ_testcxx)
SEQ_scripts2 = $(SEQ_scripts2_shared)
CRUT_progs2 = hugetlbfs2
SIMPLE_TESTS2 = $(SIMPLE_progs2) $(SIMPLE_scripts2)
SEQ_TESTS2 = $(SEQ_progs2) $(SEQ_scripts2)
CRUT_TESTS2 = $(CRUT_progs2)

# Need extra ldflags when an object references no symbols in a lib
libcr_ldflags = -u cr_link_me
libcr_run_ldflags = -u cr_run_link_me
libcr_omit_ldflags = -u cr_omit_link_me
@CR_INSTALLED_LIBCR_FALSE@libcr_L = -L$(top_builddir)/libcr

# Use the installed library and headers
@CR_INSTALLED_LIBCR_TRUE@libcr_L = -L$(libdir)
@CR_INSTALLED_LIBCR_FALSE@libcr_includes = -I$(top_srcdir)/include -I$(top_builddir)/include
@CR_INSTALLED_LIBCR_TRUE@libcr_includes = -I$(includedir)
@CR_INSTALLED_LIBCR_FALSE@LIBCR = $(top_builddir)/libcr/libcr.la \
@CR_INSTALLED_LIBCR_FALSE@	$(top_builddir)/libcr/libcr_run.la \
@CR_INSTALLED_LIBCR_FALSE@	$(top_builddir)/libcr/libcr_omit.la


# The library/ies that (nearly?) every test needs:
libcr_ldadd = $(libcr_L) -lcr
libcr_run_ldadd = $(libcr_L) -lcr_run
libcr_omit_ldadd = $(libcr_L) -lcr_omit

# Gather reusable code into libtest.a
libtest_a_SOURCES = crut.c crut_util.c crut_util_pth.c crut_util_libcr.c
libtest_ldadd = libtest.a

# Generic flags here...
LDADD = $(libtest_ldadd) $(libcr_ldadd) -lpthread @CR_CLIENT_LDADD@
INCLUDES = $(libcr_includes)
AM_CFLAGS = -Wall

# Test-specific flags here...
stage0001_LDADD = $(libtest_ldadd) $(libcr_ldadd) @CR_CLIENT_LDADD@ # NO PTHREADS FOR THIS TEST
atomics_CFLAGS = $(CFLAGS) -I$(top_srcdir)/libcr/arch/@CR_LIBARCH@
atomics_LDADD = @CR_CLIENT_LDADD@ # No libs required
atomics_stress_CFLAGS = $(CFLAGS) -I$(top_srcdir)/libcr/arch/@CR_LIBARCH@
atomics_stress_LDADD = $(libtest_ldadd) -lpthread @CR_CLIENT_LDADD@ # Only need crut_util.o and pthreads
ptrace_LDFLAGS = $(libcr_ldflags) # In static builds need help to ensure libcr is linked (no refs)

# The wrappers
wrapper_progs = seq_wrapper crut_wrapper
seq_wrapper_LDADD = $(libtest_ldadd) # Must not be a lt-exec

# Rules to "build" a shell script
# We "install" to avoid worrying about the permissions in/on $srcdir
# The .sh suffix not meant denote any specific shell
all_scripts = $(SIMPLE_scripts) $(SEQ_scripts) $(helper_scripts) \
	      $(SIMPLE_scripts2) $(SEQ_scripts2) $(helper_scripts2)

all_scripts_src = $(patsubst %,%.sh,$(all_scripts))

# Rule to wrap the SEQ tests with the seq_wrapper
SEQ_RUN = $(patsubst %,%.st,$(SEQ_TESTS))
SEQ_RUN2 = $(patsubst %,%.st,$(SEQ_TESTS2))

# Rule to wrap the CRUT tests with the crut_wrapper
# We use a 1-line script, not a symlink, in the build directory
# to allow crut_wrapper to be a libtool wrapper itself.
CRUT_RUN = $(patsubst %,%.ct,$(CRUT_TESTS))
CRUT_RUN2 = $(patsubst %,%.ct,$(CRUT_TESTS2))
hello_LDADD = # NO LIBS HERE
@CR_ENABLE_SHARED_FALSE@pause_LDADD = $(libcr_run_ldadd) @CR_CLIENT_LDADD@
@CR_ENABLE_SHARED_TRUE@pause_LDADD = # NO LIBS HERE
@CR_ENABLE_SHARED_FALSE@bug2003_aux_LDADD = $(libcr_run_ldadd) @CR_CLIENT_LDADD@
@CR_ENABLE_SHARED_TRUE@bug2003_aux_LDADD = # NO LIBS HERE
@CR_ENABLE_SHARED_FALSE@save_aux_LDADD = $(libcr_run_ldadd) $(libtest_ldadd) @CR_CLIENT_LDADD@
@CR_ENABLE_SHARED_TRUE@save_aux_LDADD = $(libtest_ldadd) # NO LIBCR HERE - must not be a lt-exec
@CR_ENABLE_SHARED_FALSE@reloc_aux_LDADD = $(libcr_run_ldadd) $(libtest_ldadd) @CR_CLIENT_LDADD@
@CR_ENABLE_SHARED_TRUE@reloc_aux_LDADD = $(libtest_ldadd) # NO LIBCR HERE - must not be a lt-exec
@CR_ENABLE_SHARED_TRUE@dlopen_aux_LDADD = -ldl # NO LIBCR HERE
@CR_ENABLE_SHARED_TRUE@helper_progs_shared = hello dlopen_aux
@CR_ENABLE_SHARED_FALSE@pause_LDFLAGS = $(libcr_run_ldflags)
@CR_ENABLE_SHARED_FALSE@bug2003_aux_LDFLAGS = $(libcr_run_ldflags)
@CR_ENABLE_SHARED_FALSE@save_aux_LDFLAGS = $(libcr_run_ldflags)
@CR_ENABLE_SHARED_FALSE@reloc_aux_LDFLAGS = $(libcr_run_ldflags)
helper_progs = $(helper_progs_shared) bug2003_aux pause save_aux reloc_aux
helper_progs2 = 
helper_scripts = 
helper_scripts2 = 

# Maintainer-only tests
BONUS_TESTS = $(SIMPLE_TESTS2) $(SEQ_RUN2) $(CRUT_RUN2)
@CR_ENABLE_SHARED_FALSE@CR_RUN_INSTALLED = env

# Some tests use cr_run even w/o shared libs - mask that
@CR_ENABLE_SHARED_TRUE@CR_RUN_INSTALLED = $(bindir)/cr_run

# Depending whether we build the testsuite or not, the test programs and
# scripts should be in either the testsexec_ or check_ prefix.
#
tester_progs = $(SIMPLE_progs) $(SEQ_progs) $(CRUT_progs) $(helper_progs)
tester_scripts = $(SIMPLE_scripts) $(SEQ_scripts) $(helper_scripts)
@CR_BUILD_TESTSUITE_TRUE@testsexecdir = $(libexecdir)/blcr-testsuite
@CR_BUILD_TESTSUITE_TRUE@testsexec_SCRIPTS = $(tester_scripts)
@CR_BUILD_TESTSUITE_TRUE@AM_INSTALLCHECK_STD_OPTIONS_EXEMPT = $(testsexec_PROGRAMS) $(testsexec_SCRIPTS)
@CR_BUILD_TESTSUITE_FALSE@check_progs = $(tester_progs)
@CR_BUILD_TESTSUITE_FALSE@check_scripts = $(tester_scripts)

# Maintainer-only tests progs and scripts (always in check_ prefix)
check_progs2 = $(SIMPLE_progs2) $(SEQ_progs2) $(CRUT_progs2) $(helper_progs2)
check_scripts2 = $(SIMPLE_scripts2) $(SEQ_scripts2) $(helper_scripts2)

# Environment variables visible to the test programs
TESTS_ENVIRONMENT = top_srcdir="$(TOP_SRCDIR)" LIBCR_DISABLE_NSCD=1
# Automake magic here...
check_LIBRARIES = libtest.a
check_HEADERS = crut.h crut_util.h
check_SCRIPTS = check_module clean_temps build_util $(check_scripts) $(check_scripts2)
EXTRA_DIST = license.txt CountingApp.java CountingApp.class RUN_ME.in $(all_scripts_src)
MOSTLYCLEANFILES = core core.* $(CONTEXTS)
CLEANFILES = $(SEQ_RUN) $(CRUT_RUN) $(SEQ_RUN2) $(CRUT_RUN2) $(all_scripts) \
             rununittests RUN_ME

all: all-am

.SUFFIXES:
.SUFFIXES: .c .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
shellinit: $(top_builddir)/config.status $(srcdir)/shellinit.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-checkLIBRARIES:
	-test -z "$(check_LIBRARIES)" || rm -f $(check_LIBRARIES)
libtest.a: $(libtest_a_OBJECTS) $(libtest_a_DEPENDENCIES) 
	-rm -f libtest.a
	$(libtest_a_AR) libtest.a $(libtest_a_OBJECTS) $(libtest_a_LIBADD)
	$(RANLIB) libtest.a

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
install-testsexecPROGRAMS: $(testsexec_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(testsexecdir)" || $(MKDIR_P) "$(DESTDIR)$(testsexecdir)"
	@list='$(testsexec_PROGRAMS)'; test -n "$(testsexecdir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(testsexecdir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(testsexecdir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-testsexecPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(testsexec_PROGRAMS)'; test -n "$(testsexecdir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(testsexecdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(testsexecdir)" && rm -f $$files

clean-testsexecPROGRAMS:
	@list='$(testsexec_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

installcheck-testsexecPROGRAMS: $(testsexec_PROGRAMS)
	bad=0; pid=$$$$; list="$(testsexec_PROGRAMS)"; for p in $$list; do \
	  case ' $(AM_INSTALLCHECK_STD_OPTIONS_EXEMPT) ' in \
	   *" $$p "* | *" $(srcdir)/$$p "*) continue;; \
	  esac; \
	  f=`echo "$$p" | \
	     sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  for opt in --help --version; do \
	    if "$(DESTDIR)$(testsexecdir)/$$f" $$opt >c$${pid}_.out \
	         2>c$${pid}_.err </dev/null \
		 && test -n "`cat c$${pid}_.out`" \
		 && test -z "`cat c$${pid}_.err`"; then :; \
	    else echo "$$f does not support $$opt" 1>&2; bad=1; fi; \
	  done; \
	done; rm -f c$${pid}_.???; exit $$bad
atomics$(EXEEXT): $(atomics_OBJECTS) $(atomics_DEPENDENCIES) 
	@rm -f atomics$(EXEEXT)
	$(atomics_LINK) $(atomics_OBJECTS) $(atomics_LDADD) $(LIBS)
atomics_stress$(EXEEXT): $(atomics_stress_OBJECTS) $(atomics_stress_DEPENDENCIES) 
	@rm -f atomics_stress$(EXEEXT)
	$(atomics_stress_LINK) $(atomics_stress_OBJECTS) $(atomics_stress_LDADD) $(LIBS)
bug2003_aux$(EXEEXT): $(bug2003_aux_OBJECTS) $(bug2003_aux_DEPENDENCIES) 
	@rm -f bug2003_aux$(EXEEXT)
	$(bug2003_aux_LINK) $(bug2003_aux_OBJECTS) $(bug2003_aux_LDADD) $(LIBS)
bug2524$(EXEEXT): $(bug2524_OBJECTS) $(bug2524_DEPENDENCIES) 
	@rm -f bug2524$(EXEEXT)
	$(LINK) $(bug2524_OBJECTS) $(bug2524_LDADD) $(LIBS)
cb_exit$(EXEEXT): $(cb_exit_OBJECTS) $(cb_exit_DEPENDENCIES) 
	@rm -f cb_exit$(EXEEXT)
	$(LINK) $(cb_exit_OBJECTS) $(cb_exit_LDADD) $(LIBS)
child$(EXEEXT): $(child_OBJECTS) $(child_DEPENDENCIES) 
	@rm -f child$(EXEEXT)
	$(LINK) $(child_OBJECTS) $(child_LDADD) $(LIBS)
cloexec$(EXEEXT): $(cloexec_OBJECTS) $(cloexec_DEPENDENCIES) 
	@rm -f cloexec$(EXEEXT)
	$(LINK) $(cloexec_OBJECTS) $(cloexec_LDADD) $(LIBS)
cr_signal$(EXEEXT): $(cr_signal_OBJECTS) $(cr_signal_DEPENDENCIES) 
	@rm -f cr_signal$(EXEEXT)
	$(LINK) $(cr_signal_OBJECTS) $(cr_signal_LDADD) $(LIBS)
cr_tryenter_cs$(EXEEXT): $(cr_tryenter_cs_OBJECTS) $(cr_tryenter_cs_DEPENDENCIES) 
	@rm -f cr_tryenter_cs$(EXEEXT)
	$(LINK) $(cr_tryenter_cs_OBJECTS) $(cr_tryenter_cs_LDADD) $(LIBS)
critical_sections$(EXEEXT): $(critical_sections_OBJECTS) $(critical_sections_DEPENDENCIES) 
	@rm -f critical_sections$(EXEEXT)
	$(LINK) $(critical_sections_OBJECTS) $(critical_sections_LDADD) $(LIBS)
crut_wrapper$(EXEEXT): $(crut_wrapper_OBJECTS) $(crut_wrapper_DEPENDENCIES) 
	@rm -f crut_wrapper$(EXEEXT)
	$(LINK) $(crut_wrapper_OBJECTS) $(crut_wrapper_LDADD) $(LIBS)
cs_enter_leave$(EXEEXT): $(cs_enter_leave_OBJECTS) $(cs_enter_leave_DEPENDENCIES) 
	@rm -f cs_enter_leave$(EXEEXT)
	$(LINK) $(cs_enter_leave_OBJECTS) $(cs_enter_leave_LDADD) $(LIBS)
cs_enter_leave2$(EXEEXT): $(cs_enter_leave2_OBJECTS) $(cs_enter_leave2_DEPENDENCIES) 
	@rm -f cs_enter_leave2$(EXEEXT)
	$(LINK) $(cs_enter_leave2_OBJECTS) $(cs_enter_leave2_LDADD) $(LIBS)
cwd$(EXEEXT): $(cwd_OBJECTS) $(cwd_DEPENDENCIES) 
	@rm -f cwd$(EXEEXT)
	$(LINK) $(cwd_OBJECTS) $(cwd_LDADD) $(LIBS)
dev_null$(EXEEXT): $(dev_null_OBJECTS) $(dev_null_DEPENDENCIES) 
	@rm -f dev_null$(EXEEXT)
	$(LINK) $(dev_null_OBJECTS) $(dev_null_LDADD) $(LIBS)
dlopen_aux$(EXEEXT): $(dlopen_aux_OBJECTS) $(dlopen_aux_DEPENDENCIES) 
	@rm -f dlopen_aux$(EXEEXT)
	$(LINK) $(dlopen_aux_OBJECTS) $(dlopen_aux_LDADD) $(LIBS)
dpipe$(EXEEXT): $(dpipe_OBJECTS) $(dpipe_DEPENDENCIES) 
	@rm -f dpipe$(EXEEXT)
	$(LINK) $(dpipe_OBJECTS) $(dpipe_LDADD) $(LIBS)
dup$(EXEEXT): $(dup_OBJECTS) $(dup_DEPENDENCIES) 
	@rm -f dup$(EXEEXT)
	$(LINK) $(dup_OBJECTS) $(dup_LDADD) $(LIBS)
edeadlk$(EXEEXT): $(edeadlk_OBJECTS) $(edeadlk_DEPENDENCIES) 
	@rm -f edeadlk$(EXEEXT)
	$(LINK) $(edeadlk_OBJECTS) $(edeadlk_LDADD) $(LIBS)
failed_cb$(EXEEXT): $(failed_cb_OBJECTS) $(failed_cb_DEPENDENCIES) 
	@rm -f failed_cb$(EXEEXT)
	$(LINK) $(failed_cb_OBJECTS) $(failed_cb_LDADD) $(LIBS)
failed_cb2$(EXEEXT): $(failed_cb2_OBJECTS) $(failed_cb2_DEPENDENCIES) 
	@rm -f failed_cb2$(EXEEXT)
	$(LINK) $(failed_cb2_OBJECTS) $(failed_cb2_LDADD) $(LIBS)
filedescriptors$(EXEEXT): $(filedescriptors_OBJECTS) $(filedescriptors_DEPENDENCIES) 
	@rm -f filedescriptors$(EXEEXT)
	$(LINK) $(filedescriptors_OBJECTS) $(filedescriptors_LDADD) $(LIBS)
forward$(EXEEXT): $(forward_OBJECTS) $(forward_DEPENDENCIES) 
	@rm -f forward$(EXEEXT)
	$(LINK) $(forward_OBJECTS) $(forward_LDADD) $(LIBS)
get_info$(EXEEXT): $(get_info_OBJECTS) $(get_info_DEPENDENCIES) 
	@rm -f get_info$(EXEEXT)
	$(LINK) $(get_info_OBJECTS) $(get_info_LDADD) $(LIBS)
hello$(EXEEXT): $(hello_OBJECTS) $(hello_DEPENDENCIES) 
	@rm -f hello$(EXEEXT)
	$(LINK) $(hello_OBJECTS) $(hello_LDADD) $(LIBS)
hooks$(EXEEXT): $(hooks_OBJECTS) $(hooks_DEPENDENCIES) 
	@rm -f hooks$(EXEEXT)
	$(LINK) $(hooks_OBJECTS) $(hooks_LDADD) $(LIBS)
hugetlbfs$(EXEEXT): $(hugetlbfs_OBJECTS) $(hugetlbfs_DEPENDENCIES) 
	@rm -f hugetlbfs$(EXEEXT)
	$(LINK) $(hugetlbfs_OBJECTS) $(hugetlbfs_LDADD) $(LIBS)
hugetlbfs2$(EXEEXT): $(hugetlbfs2_OBJECTS) $(hugetlbfs2_DEPENDENCIES) 
	@rm -f hugetlbfs2$(EXEEXT)
	$(LINK) $(hugetlbfs2_OBJECTS) $(hugetlbfs2_LDADD) $(LIBS)
lam$(EXEEXT): $(lam_OBJECTS) $(lam_DEPENDENCIES) 
	@rm -f lam$(EXEEXT)
	$(LINK) $(lam_OBJECTS) $(lam_LDADD) $(LIBS)
linked_fifo$(EXEEXT): $(linked_fifo_OBJECTS) $(linked_fifo_DEPENDENCIES) 
	@rm -f linked_fifo$(EXEEXT)
	$(LINK) $(linked_fifo_OBJECTS) $(linked_fifo_LDADD) $(LIBS)
math$(EXEEXT): $(math_OBJECTS) $(math_DEPENDENCIES) 
	@rm -f math$(EXEEXT)
	$(LINK) $(math_OBJECTS) $(math_LDADD) $(LIBS)
mmaps$(EXEEXT): $(mmaps_OBJECTS) $(mmaps_DEPENDENCIES) 
	@rm -f mmaps$(EXEEXT)
	$(LINK) $(mmaps_OBJECTS) $(mmaps_LDADD) $(LIBS)
named_fifo$(EXEEXT): $(named_fifo_OBJECTS) $(named_fifo_DEPENDENCIES) 
	@rm -f named_fifo$(EXEEXT)
	$(LINK) $(named_fifo_OBJECTS) $(named_fifo_LDADD) $(LIBS)
nscd$(EXEEXT): $(nscd_OBJECTS) $(nscd_DEPENDENCIES) 
	@rm -f nscd$(EXEEXT)
	$(LINK) $(nscd_OBJECTS) $(nscd_LDADD) $(LIBS)
orphan$(EXEEXT): $(orphan_OBJECTS) $(orphan_DEPENDENCIES) 
	@rm -f orphan$(EXEEXT)
	$(LINK) $(orphan_OBJECTS) $(orphan_LDADD) $(LIBS)
overlap$(EXEEXT): $(overlap_OBJECTS) $(overlap_DEPENDENCIES) 
	@rm -f overlap$(EXEEXT)
	$(LINK) $(overlap_OBJECTS) $(overlap_LDADD) $(LIBS)
pause$(EXEEXT): $(pause_OBJECTS) $(pause_DEPENDENCIES) 
	@rm -f pause$(EXEEXT)
	$(pause_LINK) $(pause_OBJECTS) $(pause_LDADD) $(LIBS)
pid_in_use$(EXEEXT): $(pid_in_use_OBJECTS) $(pid_in_use_DEPENDENCIES) 
	@rm -f pid_in_use$(EXEEXT)
	$(LINK) $(pid_in_use_OBJECTS) $(pid_in_use_LDADD) $(LIBS)
pid_restore$(EXEEXT): $(pid_restore_OBJECTS) $(pid_restore_DEPENDENCIES) 
	@rm -f pid_restore$(EXEEXT)
	$(LINK) $(pid_restore_OBJECTS) $(pid_restore_LDADD) $(LIBS)
pipe$(EXEEXT): $(pipe_OBJECTS) $(pipe_DEPENDENCIES) 
	@rm -f pipe$(EXEEXT)
	$(LINK) $(pipe_OBJECTS) $(pipe_LDADD) $(LIBS)
prctl$(EXEEXT): $(prctl_OBJECTS) $(prctl_DEPENDENCIES) 
	@rm -f prctl$(EXEEXT)
	$(LINK) $(prctl_OBJECTS) $(prctl_LDADD) $(LIBS)
ptrace$(EXEEXT): $(ptrace_OBJECTS) $(ptrace_DEPENDENCIES) 
	@rm -f ptrace$(EXEEXT)
	$(ptrace_LINK) $(ptrace_OBJECTS) $(ptrace_LDADD) $(LIBS)
readdir$(EXEEXT): $(readdir_OBJECTS) $(readdir_DEPENDENCIES) 
	@rm -f readdir$(EXEEXT)
	$(LINK) $(readdir_OBJECTS) $(readdir_LDADD) $(LIBS)
reloc_aux$(EXEEXT): $(reloc_aux_OBJECTS) $(reloc_aux_DEPENDENCIES) 
	@rm -f reloc_aux$(EXEEXT)
	$(reloc_aux_LINK) $(reloc_aux_OBJECTS) $(reloc_aux_LDADD) $(LIBS)
replace_cb$(EXEEXT): $(replace_cb_OBJECTS) $(replace_cb_DEPENDENCIES) 
	@rm -f replace_cb$(EXEEXT)
	$(LINK) $(replace_cb_OBJECTS) $(replace_cb_LDADD) $(LIBS)
save_aux$(EXEEXT): $(save_aux_OBJECTS) $(save_aux_DEPENDENCIES) 
	@rm -f save_aux$(EXEEXT)
	$(save_aux_LINK) $(save_aux_OBJECTS) $(save_aux_LDADD) $(LIBS)
seq_wrapper$(EXEEXT): $(seq_wrapper_OBJECTS) $(seq_wrapper_DEPENDENCIES) 
	@rm -f seq_wrapper$(EXEEXT)
	$(LINK) $(seq_wrapper_OBJECTS) $(seq_wrapper_LDADD) $(LIBS)
sigaltstack$(EXEEXT): $(sigaltstack_OBJECTS) $(sigaltstack_DEPENDENCIES) 
	@rm -f sigaltstack$(EXEEXT)
	$(LINK) $(sigaltstack_OBJECTS) $(sigaltstack_LDADD) $(LIBS)
sigpending$(EXEEXT): $(sigpending_OBJECTS) $(sigpending_DEPENDENCIES) 
	@rm -f sigpending$(EXEEXT)
	$(LINK) $(sigpending_OBJECTS) $(sigpending_LDADD) $(LIBS)
simple$(EXEEXT): $(simple_OBJECTS) $(simple_DEPENDENCIES) 
	@rm -f simple$(EXEEXT)
	$(LINK) $(simple_OBJECTS) $(simple_LDADD) $(LIBS)
simple_pthread$(EXEEXT): $(simple_pthread_OBJECTS) $(simple_pthread_DEPENDENCIES) 
	@rm -f simple_pthread$(EXEEXT)
	$(LINK) $(simple_pthread_OBJECTS) $(simple_pthread_LDADD) $(LIBS)
stage0001$(EXEEXT): $(stage0001_OBJECTS) $(stage0001_DEPENDENCIES) 
	@rm -f stage0001$(EXEEXT)
	$(LINK) $(stage0001_OBJECTS) $(stage0001_LDADD) $(LIBS)
stage0002$(EXEEXT): $(stage0002_OBJECTS) $(stage0002_DEPENDENCIES) 
	@rm -f stage0002$(EXEEXT)
	$(LINK) $(stage0002_OBJECTS) $(stage0002_LDADD) $(LIBS)
stage0003$(EXEEXT): $(stage0003_OBJECTS) $(stage0003_DEPENDENCIES) 
	@rm -f stage0003$(EXEEXT)
	$(LINK) $(stage0003_OBJECTS) $(stage0003_LDADD) $(LIBS)
stage0004$(EXEEXT): $(stage0004_OBJECTS) $(stage0004_DEPENDENCIES) 
	@rm -f stage0004$(EXEEXT)
	$(LINK) $(stage0004_OBJECTS) $(stage0004_LDADD) $(LIBS)
stopped$(EXEEXT): $(stopped_OBJECTS) $(stopped_DEPENDENCIES) 
	@rm -f stopped$(EXEEXT)
	$(LINK) $(stopped_OBJECTS) $(stopped_LDADD) $(LIBS)
testcxx$(EXEEXT): $(testcxx_OBJECTS) $(testcxx_DEPENDENCIES) 
	@rm -f testcxx$(EXEEXT)
	$(CXXLINK) $(testcxx_OBJECTS) $(testcxx_LDADD) $(LIBS)
install-testsexecSCRIPTS: $(testsexec_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(testsexecdir)" || $(MKDIR_P) "$(DESTDIR)$(testsexecdir)"
	@list='$(testsexec_SCRIPTS)'; test -n "$(testsexecdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f "$$d$$p"; then echo "$$d$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n' \
	    -e 'h;s|.*|.|' \
	    -e 'p;x;s,.*/,,;$(transform)' | sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1; } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) { files[d] = files[d] " " $$1; \
	      if (++n[d] == $(am__install_max)) { \
		print "f", d, files[d]; n[d] = 0; files[d] = "" } } \
	    else { print "f", d "/" $$4, $$1 } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	     if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	     test -z "$$files" || { \
	       echo " $(INSTALL_SCRIPT) $$files '$(DESTDIR)$(testsexecdir)$$dir'"; \
	       $(INSTALL_SCRIPT) $$files "$(DESTDIR)$(testsexecdir)$$dir" || exit $$?; \
	     } \
	; done

uninstall-testsexecSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(testsexec_SCRIPTS)'; test -n "$(testsexecdir)" || exit 0; \
	files=`for p in $$list; do echo "$$p"; done | \
	       sed -e 's,.*/,,;$(transform)'`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(testsexecdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(testsexecdir)" && rm -f $$files

installcheck-testsexecSCRIPTS: $(testsexec_SCRIPTS)
	bad=0; pid=$$$$; list="$(testsexec_SCRIPTS)"; for p in $$list; do \
	  case ' $(AM_INSTALLCHECK_STD_OPTIONS_EXEMPT) ' in \
	   *" $$p "* | *" $(srcdir)/$$p "*) continue;; \
	  esac; \
	  f=`echo "$$p" | sed 's,^.*/,,;$(transform)'`; \
	  for opt in --help --version; do \
	    if "$(DESTDIR)$(testsexecdir)/$$f" $$opt >c$${pid}_.out \
	         2>c$${pid}_.err </dev/null \
		 && test -n "`cat c$${pid}_.out`" \
		 && test -z "`cat c$${pid}_.err`"; then :; \
	    else echo "$$f does not support $$opt" 1>&2; bad=1; fi; \
	  done; \
	done; rm -f c$${pid}_.???; exit $$bad

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/atomics-atomics.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/atomics_stress-atomics_stress.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bug2003_aux.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bug2524.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cb_exit.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/child.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cloexec.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cr_signal.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cr_tryenter_cs.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/critical_sections.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/crut.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/crut_util.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/crut_util_libcr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/crut_util_pth.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/crut_wrapper.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cs_enter_leave.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cs_enter_leave2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cwd.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dev_null.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dlopen_aux.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dpipe.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dup.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/edeadlk.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/failed_cb.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/failed_cb2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/filedescriptors.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/forward.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/get_info.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hello.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hooks.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hugetlbfs.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hugetlbfs2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lam.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/linked_fifo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/math.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mmaps.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/named_fifo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/nscd.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/orphan.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/overlap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pause.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pid_in_use.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pid_restore.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pipe.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/prctl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ptrace.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/readdir.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reloc_aux.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/replace_cb.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/save_aux.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/seq_wrapper.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sigaltstack.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sigpending.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/simple.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/simple_pthread.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stage0001.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stage0002.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stage0003.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stage0004.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stopped.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testcxx.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(LTCOMPILE) -c -o $@ $<

atomics-atomics.o: atomics.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(atomics_CFLAGS) $(CFLAGS) -MT atomics-atomics.o -MD -MP -MF $(DEPDIR)/atomics-atomics.Tpo -c -o atomics-atomics.o `test -f 'atomics.c' || echo '$(srcdir)/'`atomics.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/atomics-atomics.Tpo $(DEPDIR)/atomics-atomics.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='atomics.c' object='atomics-atomics.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(atomics_CFLAGS) $(CFLAGS) -c -o atomics-atomics.o `test -f 'atomics.c' || echo '$(srcdir)/'`atomics.c

atomics-atomics.obj: atomics.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(atomics_CFLAGS) $(CFLAGS) -MT atomics-atomics.obj -MD -MP -MF $(DEPDIR)/atomics-atomics.Tpo -c -o atomics-atomics.obj `if test -f 'atomics.c'; then $(CYGPATH_W) 'atomics.c'; else $(CYGPATH_W) '$(srcdir)/atomics.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/atomics-atomics.Tpo $(DEPDIR)/atomics-atomics.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='atomics.c' object='atomics-atomics.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(atomics_CFLAGS) $(CFLAGS) -c -o atomics-atomics.obj `if test -f 'atomics.c'; then $(CYGPATH_W) 'atomics.c'; else $(CYGPATH_W) '$(srcdir)/atomics.c'; fi`

atomics_stress-atomics_stress.o: atomics_stress.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(atomics_stress_CFLAGS) $(CFLAGS) -MT atomics_stress-atomics_stress.o -MD -MP -MF $(DEPDIR)/atomics_stress-atomics_stress.Tpo -c -o atomics_stress-atomics_stress.o `test -f 'atomics_stress.c' || echo '$(srcdir)/'`atomics_stress.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/atomics_stress-atomics_stress.Tpo $(DEPDIR)/atomics_stress-atomics_stress.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='atomics_stress.c' object='atomics_stress-atomics_stress.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(atomics_stress_CFLAGS) $(CFLAGS) -c -o atomics_stress-atomics_stress.o `test -f 'atomics_stress.c' || echo '$(srcdir)/'`atomics_stress.c

atomics_stress-atomics_stress.obj: atomics_stress.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(atomics_stress_CFLAGS) $(CFLAGS) -MT atomics_stress-atomics_stress.obj -MD -MP -MF $(DEPDIR)/atomics_stress-atomics_stress.Tpo -c -o atomics_stress-atomics_stress.obj `if test -f 'atomics_stress.c'; then $(CYGPATH_W) 'atomics_stress.c'; else $(CYGPATH_W) '$(srcdir)/atomics_stress.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/atomics_stress-atomics_stress.Tpo $(DEPDIR)/atomics_stress-atomics_stress.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='atomics_stress.c' object='atomics_stress-atomics_stress.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(atomics_stress_CFLAGS) $(CFLAGS) -c -o atomics_stress-atomics_stress.obj `if test -f 'atomics_stress.c'; then $(CYGPATH_W) 'atomics_stress.c'; else $(CYGPATH_W) '$(srcdir)/atomics_stress.c'; fi`

.cc.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    echo "$$grn$$dashes"; \
	  else \
	    echo "$$red$$dashes"; \
	  fi; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes$$std"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_LIBRARIES) $(check_PROGRAMS) \
	  $(check_SCRIPTS) $(check_HEADERS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(PROGRAMS) $(SCRIPTS)
installdirs:
	for dir in "$(DESTDIR)$(testsexecdir)" "$(DESTDIR)$(testsexecdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
@CR_BUILD_TESTSUITE_FALSE@uninstall-local:
@CR_BUILD_TESTSUITE_FALSE@install-exec-local:
clean: clean-am

clean-am: clean-checkLIBRARIES clean-checkPROGRAMS clean-generic \
	clean-libtool clean-local clean-testsexecPROGRAMS \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-exec-local install-testsexecPROGRAMS \
	install-testsexecSCRIPTS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am: installcheck-testsexecPROGRAMS \
	installcheck-testsexecSCRIPTS

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-local uninstall-testsexecPROGRAMS \
	uninstall-testsexecSCRIPTS

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkLIBRARIES clean-checkPROGRAMS clean-generic \
	clean-libtool clean-local clean-testsexecPROGRAMS ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-exec-local install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip install-testsexecPROGRAMS \
	install-testsexecSCRIPTS installcheck installcheck-am \
	installcheck-testsexecPROGRAMS installcheck-testsexecSCRIPTS \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-local uninstall-testsexecPROGRAMS \
	uninstall-testsexecSCRIPTS


# Special target (run before tests) ensures the kernel modules are loaded
check_module:
	@(/sbin/lsmod | grep '^blcr ' > /dev/null 2>&1) || \
	(echo	'#############################################################'; \
	 echo	'#### BLCR modules are not loaded.  Cannot run the tests! ####'; \
	 echo	'#### You must insmod/modprobe the following modules as   ####'; \
	 echo	'#### root (in order) before you can run "make check":    ####'; \
	 echo	'####    blcr_imports   blcr                              ####'; \
	 echo	'#### "make insmod" will automate this if run as a user   ####'; \
	 echo	'#### with sudo(8) rights.                                ####'; \
	 echo	'#############################################################'; \
	false)
# Special target (run before tests) ensures no temp file conflicts
clean_temps:
	rm -Rf $(CONTEXTS) $(TEST_TEMPS)
@CR_BUILD_UTIL_TRUE@build_util:
@CR_BUILD_UTIL_TRUE@	@$(MAKE) $(AM_MAKEFLAGS) --no-print-directory -C $(TOP_BUILDDIR) util symlinks
@CR_BUILD_UTIL_FALSE@build_util:
@CR_BUILD_UTIL_FALSE@	@: # Empty
@CR_INSTALLED_LIBCR_FALSE@$(tester_progs) $(check_progs2): $(LIBCR)
$(all_scripts): shellinit
$(all_scripts) : % : %.sh
	$(INSTALL_SCRIPT) $< $@
$(SEQ_RUN) $(SEQ_RUN2) : %.st : % seq_wrapper
	@rm -f $@
	@$(LN_S) -f seq_wrapper $@
$(CRUT_RUN) $(CRUT_RUN2) : %.ct : % crut_wrapper
	@rm -f $@
	@(echo '#!/bin/sh'; \
	  echo 'exec `dirname $$0`/crut_wrapper -q "$$@" $*' ) > $@
	@chmod +x $@

# Script to run all the CRUT tests standalone
rununittests: $(CRUT_TESTS)
	(echo '#!/bin/sh'; echo './crut_wrapper $$@ $(CRUT_TESTS)') > $@
	chmod +x $@

# Rules to help w/ some dependencies in other directories:
@CR_BUILD_LIBCR_TRUE@$(LIBCR): FORCE
@CR_BUILD_LIBCR_TRUE@	@$(MAKE) $(AM_MAKEFLAGS) --no-print-directory -C $(@D)

# Prog(s) needed indirectly by test(s)
cr_run: hello
cr_targ cr_tagr2 cr_omit: pause
bug2003: bug2003_aux
save_exe save_priv save_share save_all: save_aux
reloc_exe reloc_file reloc_fifo reloc_dir reloc_all: reloc_aux
run_on: save_aux pause
clobber: save_aux
@CR_ENABLE_SHARED_TRUE@dlopen: dlopen_aux
bonus-tests: $(BONUS_TESTS)
	@$(MAKE) $(AM_MAKEFLAGS) --no-print-directory check TESTS="$(BONUS_TESTS)"
bonus-check: $(BONUS_TESTS)
	@$(MAKE) $(AM_MAKEFLAGS) --no-print-directory check TESTS="$(TESTS) $(BONUS_TESTS)"

# Create our own target for building (but NOT running) the tests
build-tests: tests # Legacy target
tests: $(TESTS) $(BONUS_TESTS) rununittests
	@echo '################################################################################'
	@echo 'HOW TO RUN THESE TESTS:'
	@echo 
	@echo 'SIMPLE TESTS ($(SIMPLE_TESTS)):'
	@echo '--- use ./test'
	@echo 'UNIT TESTS ($(CRUT_TESTS)):'
	@echo '--- use ./<test>.ct'
	@echo '--- or use ./rununittests to run them all'
	@echo 'SEQ TESTS ($(SEQ_TESTS)):'
	@echo '--- use ./<test>.st'
	@echo '################################################################################'
@CR_BUILD_TESTSUITE_TRUE@install-exec-local:
@CR_BUILD_TESTSUITE_TRUE@	@$(mkinstalldirs) "$(DESTDIR)$(testsexecdir)"
@CR_BUILD_TESTSUITE_TRUE@	@cd "$(DESTDIR)$(testsexecdir)" && \
@CR_BUILD_TESTSUITE_TRUE@	 for file in $(SEQ_RUN); do rm -f $$file; $(LN_S) seq_wrapper $$file; done && \
@CR_BUILD_TESTSUITE_TRUE@	 for file in $(CRUT_RUN); do rm -f $$file; $(LN_S) crut_wrapper $$file; done && \
@CR_BUILD_TESTSUITE_TRUE@	 echo '# This file is required, but typically empty, in an installed testsuite' > shellinit && \
@CR_BUILD_TESTSUITE_TRUE@	 chmod 644 shellinit
@CR_BUILD_TESTSUITE_TRUE@	@sed -e 's,%bindir%,$(bindir),;' \
@CR_BUILD_TESTSUITE_TRUE@	     -e 's,%tests%,$(TESTS),;' \
@CR_BUILD_TESTSUITE_TRUE@	     -e 's,%cr_run%,$(CR_RUN_INSTALLED),;' \
@CR_BUILD_TESTSUITE_TRUE@	     -e 's,%cr_pwd%,@PWD_PROG@,;' \
@CR_BUILD_TESTSUITE_TRUE@		$(srcdir)/RUN_ME.in >$(DESTDIR)$(testsexecdir)/RUN_ME
@CR_BUILD_TESTSUITE_TRUE@	@chmod +x $(DESTDIR)$(testsexecdir)/RUN_ME
@CR_BUILD_TESTSUITE_TRUE@uninstall-local:
@CR_BUILD_TESTSUITE_TRUE@	@cd $(DESTDIR)$(testsexecdir) && rm -f RUN_ME $(SEQ_RUN) $(CRUT_RUN)
clean-local: clean_temps
echoval: FORCE
	@echo $($(VARNAME)) | sed 's/"/\\"/'g
.PHONY: check_module clean_temps build_util tests build-tests echoval FORCE
FORCE:

# Preserve the empty line above!

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
