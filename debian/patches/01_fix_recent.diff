#! /bin/sh /usr/share/dpatch/dpatch-run
## 01_fix_recent.dpatch by  <root@debian-unstable>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Upstream patch to provide recent kernel support.
## DP: URL: https://upc-bugs.lbl.gov/blcr-dist/blcr-0.8.2+kernel-2.6.31.patch01
## DP: SA: http://www.nersc.gov/hypermail/checkpoint/1299.html

@DPATCH@
diff -urNad blcr-0.8.2~/acinclude.m4 blcr-0.8.2/acinclude.m4
--- blcr-0.8.2~/acinclude.m4	2009-06-12 21:37:01.000000000 +0100
+++ blcr-0.8.2/acinclude.m4	2009-11-09 10:41:12.000000000 +0000
@@ -953,8 +953,9 @@
 # When complete sets LINUX_SYMTAB_CMD such that
 # "eval $LINUX_SYMTAB_CMD" will produce a System.map on stdout.
 cr_stripped_maps=''
+m4_define([cr_ksymtab_patt],[[-e '[TD] sys_open' -e '[AB] _end']])
 AC_DEFUN([_CR_CHECK_SYSTEM_MAP],[
-  if test -n "$1" -a -r "$1" && grep ' [[AB]] _end' <"$1" >/dev/null 2>/dev/null; then
+  if test -n "$1" -a -r "$1" && grep cr_ksymtab_patt <"$1" >/dev/null 2>/dev/null; then
     if grep -B1 '[[AB]] _end' <"$1" | grep _stext >/dev/null 2>/dev/null; then
       # Reject "stripped" files (such as in FC2)
       # Recognized (poorly) by _stext and _end as last two entries.
@@ -968,7 +969,7 @@
 ])
 AC_DEFUN([_CR_CHECK_VMLINUX],[
   AC_REQUIRE([AC_PROG_NM])
-  if test -n "$1" -a -r "$1" && ($NM "$1" | grep ' [[AB]] _end') >/dev/null 2>/dev/null; then
+  if test -n "$1" -a -r "$1" && ($NM "$1" | grep cr_ksymtab_patt) >/dev/null 2>/dev/null; then
     LINUX_VMLINUX="$1"
     LINUX_SYMTAB_FILE="$1"
     LINUX_SYMTAB_CMD="$NM $1 2>/dev/null"
diff -urNad blcr-0.8.2~/config/kbuild.mak.in blcr-0.8.2/config/kbuild.mak.in
--- blcr-0.8.2~/config/kbuild.mak.in	2008-08-04 19:39:29.000000000 +0100
+++ blcr-0.8.2/config/kbuild.mak.in	2009-11-09 10:41:12.000000000 +0000
@@ -26,7 +26,7 @@
 # Remove headers from the list of sources, and sort to remove possible duplicates
 DOT_C := $(sort $(filter %.c,$(SOURCES)))
 
-ifeq ($(TOPDIR),)
+ifeq ($(srctree),)
 # not within KBUILD - implement automake's standard goals
 
 all: $(LINUX_OBJ)/.config prepare
diff -urNad blcr-0.8.2~/configure.ac blcr-0.8.2/configure.ac
--- blcr-0.8.2~/configure.ac	2009-06-15 23:33:56.000000000 +0100
+++ blcr-0.8.2/configure.ac	2009-11-09 10:41:12.000000000 +0000
@@ -454,9 +454,10 @@
 AC_SUBST(CR_CLIENT_LDADD)
 
 # If building the tests, we can optionally test C++
-if test x"$cr_build_tests" = xyes; then
+# Note, however, that  bug 2619 reports that we can't call this conditionally.
+dnl if test x"$cr_build_tests" = xyes; then
   CR_PROG_CXX
-fi
+dnl fi
 
 ################################################################################
 # Check libraries
@@ -1230,6 +1231,7 @@
 if test -z "${HAVE_2_ARG_FIND_PID}${HAVE_FIND_TASK_BY_PID}${HAVE_FIND_TASK_BY_PID_NS}"; then
   CR_BAD_KERNEL([unable to determine how to map (type, pid_nr) -> struct task])
 fi
+CR_FIND_KSYM([find_task_by_pid_ns],[CODE])
 
 CR_CHECK_KERNEL_CALL([alloc_pid],[#include <linux/sched.h>])
 if test -n "${HAVE_ALLOC_PID}"; then
diff -urNad blcr-0.8.2~/cr_module/cr_kcompat.h blcr-0.8.2/cr_module/cr_kcompat.h
--- blcr-0.8.2~/cr_module/cr_kcompat.h	2009-06-12 21:37:03.000000000 +0100
+++ blcr-0.8.2/cr_module/cr_kcompat.h	2009-11-09 10:41:12.000000000 +0000
@@ -274,7 +274,8 @@
 #elif HAVE_2_ARG_FIND_PID
   #define cr_have_pid(T,P) (find_pid((T),(P)) != NULL)
 #else
-  #error
+  // XXX: untested!
+  #define cr_have_pid(T,P) (pid_task(find_vpid(P),(T)) != NULL)
 #endif
 
 // Process table iterators
